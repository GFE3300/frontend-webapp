/**
 * @auto-managed
 *
 * This file is managed by the I18N script. Any manual changes to this file will be
 * overwritten during the next synchronization. To add or modify text, please
 * update the original string in this file and then run the 'sync' command.
 *
 * @last-synced 2025-06-07 11:26:40 UTC
 */

import i18n from '../../../i18n';

export const scriptLines_useFormState = {
    // Console Log Messages
    log: {
        failedToParseSessionStorage: i18n.t('register.useFormState.log.failedToParseSessionStorage'), // "useFormState: Failed to parse state from session storage:"
        failedToSaveSessionStorage: i18n.t('register.useFormState.log.failedToSaveSessionStorage'), // "useFormState: Failed to save state to session storage:"
    },

    // Validation Messages - Step 0: Business Information
    validation: {
        businessNameRequired: i18n.t('register.useFormState.validation.businessNameRequired'), // "Business name is required."
        emailInvalid: i18n.t('register.useFormState.validation.emailInvalid'), // "Invalid email format."
        businessEmailRequired: i18n.t('register.useFormState.validation.businessEmailRequired'), // "Business email is required."
        businessUsernameInvalidFormat: i18n.t('register.useFormState.validation.businessUsernameInvalidFormat'), // "Username can only contain letters, numbers, and underscores."
        businessUsernameRequired: i18n.t('register.useFormState.validation.businessUsernameRequired'), // "Username is required."
        businessPhoneRequired: i18n.t('register.useFormState.validation.businessPhoneRequired'), // "Business phone number is required."
        businessTagsMin: i18n.t('register.useFormState.validation.businessTagsMin'), // "Please select at least one business tag."
        businessWebsiteInvalidUrl: i18n.t('register.useFormState.validation.businessWebsiteInvalidUrl'), // "Please enter a valid URL (e.g., https://example.com).nullable()"

        // Validation Messages - Step 1: Business Location
        locationRequiredOnMap: i18n.t('register.useFormState.validation.locationRequiredOnMap'), // "Location is required. Please select on map."
        addressStreetRequired: i18n.t('register.useFormState.validation.addressStreetRequired'), // "Street address is required."
        addressCityRequired: i18n.t('register.useFormState.validation.addressCityRequired'), // "City is required."
        addressPostalCodeRequired: i18n.t('register.useFormState.validation.addressPostalCodeRequired'), // "Postal code is required."
        addressCountryRequired: i18n.t('register.useFormState.validation.addressCountryRequired'), // "Country is required."
        addressDetailsRequired: i18n.t('register.useFormState.validation.addressDetailsRequired'), // "Address details are required."

        // Validation Messages - Step 2: Business Logo (Strings for commented-out validations)
        logoFileSizeTooLarge: i18n.t('register.useFormState.validation.logoFileSizeTooLarge'), // "Logo file is too large (max 5MB)."
        logoFileTypeUnsupported: i18n.t('register.useFormState.validation.logoFileTypeUnsupported'), // "Unsupported logo format (PNG, JPG, GIF, WEBP)."

        // Validation Messages - Step 3: Your Profile
        profileNameRequired: i18n.t('register.useFormState.validation.profileNameRequired'), // "Your full name is required."
        // validation.emailInvalid is reused here
        profileEmailRequired: i18n.t('register.useFormState.validation.profileEmailRequired'), // "Your contact email is required."
        profilePhoneRequired: i18n.t('register.useFormState.validation.profilePhoneRequired'), // "Your contact phone number is required."
        passwordMinLength: i18n.t('register.useFormState.validation.passwordMinLength'), // "Password must be at least 8 characters."
        passwordRequiresUppercase: i18n.t('register.useFormState.validation.passwordRequiresUppercase'), // "Password must contain an uppercase letter."
        passwordRequiresLowercase: i18n.t('register.useFormState.validation.passwordRequiresLowercase'), // "Password must contain a lowercase letter."
        passwordRequiresNumber: i18n.t('register.useFormState.validation.passwordRequiresNumber'), // "Password must contain a number."
        passwordRequiresSpecialChar: i18n.t('register.useFormState.validation.passwordRequiresSpecialChar'), // "Password must contain a special character."
        passwordRequired: i18n.t('register.useFormState.validation.passwordRequired'), // "Password is required."
        confirmPasswordMatch: i18n.t('register.useFormState.validation.confirmPasswordMatch'), // "Passwords must match."
        confirmPasswordRequired: i18n.t('register.useFormState.validation.confirmPasswordRequired'), // "Please confirm your password."

        // Validation Messages - Step 4: Preferences
        timezoneRequired: i18n.t('register.useFormState.validation.timezoneRequired'), // "Timezone selection is required."
        currencyRequired: i18n.t('register.useFormState.validation.currencyRequired'), // "Currency selection is required."
        languageRequired: i18n.t('register.useFormState.validation.languageRequired'), // "Language selection is required."
        acceptTermsRequired: i18n.t('register.useFormState.validation.acceptTermsRequired'), // "You must accept the Terms of Service and Privacy Policy."

        // Validation Messages - Step 5: Profile Image (Strings for commented-out validations)
        profileImageFileSizeTooLarge: i18n.t('register.useFormState.validation.profileImageFileSizeTooLarge'), // "Profile image is too large (max 5MB)."
        profileImageFileTypeUnsupported: i18n.t('register.useFormState.validation.profileImageFileTypeUnsupported'), // "Unsupported image format."
    },

    // General Error Messages for Steps
    error: {
        form: {
            correctErrorsInStep: i18n.t('register.useFormState.error.form.correctErrorsInStep'), // "Please correct the errors in step {stepNumber}."
            correctErrorsInStepTitleCase: i18n.t('register.useFormState.error.form.correctErrorsInStepTitleCase'), // "Please correct errors in Step {stepNumber}."
        }
    },

    // Password Strength Indicator Values
    // These are values returned by the hook. If displayed, they are now localized.
    // If they are keys for further lookup in a full i18n system, this structure would change.
    passwordStrength: {
        weak: i18n.t('register.useFormState.passwordStrength.weak'), // "weak"
        fair: i18n.t('register.useFormState.passwordStrength.fair'), // "fair"
        strong: i18n.t('register.useFormState.passwordStrength.strong'), // "strong"
    },
};

export const scriptLines_Registration = {

    autocompleteInput: {
        label: i18n.t('register.registration.autocompleteInput.label'), // "Search for location or address"
        placeholder: i18n.t('register.registration.autocompleteInput.placeholder'), // "E.g., 123 Main St, Anytown, USA"
        aria: {
            addressSuggestions: i18n.t('register.registration.autocompleteInput.aria.addressSuggestions') // "Address suggestions"
        },
        status: {
            findingLocations: i18n.t('register.registration.autocompleteInput.status.findingLocations'), // "Finding locations..."
            noResults: i18n.t('register.registration.autocompleteInput.status.noResults'), // "No matching locations found."
            errorFetching: i18n.t('register.registration.autocompleteInput.status.errorFetching'), // "Could not fetch suggestions. Please try again."
            loadingDetails: i18n.t('register.registration.autocompleteInput.status.loadingDetails'), // "Loading details..."
        },
        error: {
            placesLibraryNotLoaded: i18n.t('register.registration.autocompleteInput.error.placesLibraryNotLoaded'), // "Location services are currently unavailable."
            fetchDetailsFailed: i18n.t('register.registration.autocompleteInput.error.fetchDetailsFailed'), // "Failed to load details for the selected location."
            searchByTextError: i18n.t('register.registration.autocompleteInput.error.searchByTextError'), // "Error searching for locations."
        }
    },
    addressForm: {
        label: {
            streetAddress: i18n.t('register.addressForm.addressForm.label.streetAddress'), // "Street Address"
            city: i18n.t('register.addressForm.addressForm.label.city'), // "City"
            postalCode: i18n.t('register.addressForm.addressForm.label.postalCode'), // "Postal Code"
            country: i18n.t('register.addressForm.addressForm.label.country'), // "Country"
        },
        placeholder: {
            selectCountry: i18n.t('register.registration.addressForm.placeholder.selectCountry'), // "Select a country"
        },
        staticCountries: {
            US: i18n.t('register.addressForm.addressForm.staticCountries.US'), // "United States"
            CA: i18n.t('register.addressForm.addressForm.staticCountries.CA'), // "Canada"
            GB: i18n.t('register.addressForm.addressForm.staticCountries.GB'), // "United Kingdom"
            AU: i18n.t('register.addressForm.addressForm.staticCountries.AU'), // "Australia"
            ES: i18n.t('register.addressForm.addressForm.staticCountries.ES'), // "Spain"
            FR: i18n.t('register.addressForm.addressForm.staticCountries.FR'), // "France"
            DE: i18n.t('register.addressForm.addressForm.staticCountries.DE'), // "Germany"
            IT: i18n.t('register.addressForm.addressForm.staticCountries.IT'), // "Italy"
            PT: i18n.t('register.addressForm.addressForm.staticCountries.PT'), // "Portugal"
            BR: i18n.t('register.addressForm.addressForm.staticCountries.BR'), // "Brazil"
            MX: i18n.t('register.addressForm.addressForm.staticCountries.MX'), // "Mexico"
            IN: i18n.t('register.addressForm.addressForm.staticCountries.IN'), // "India"
            JP: i18n.t('register.addressForm.addressForm.staticCountries.JP'), // "Japan"
            CN: i18n.t('register.addressForm.addressForm.staticCountries.CN'), // "China"
            RU: i18n.t('register.addressForm.addressForm.staticCountries.RU'), // "Russia"
            ZA: i18n.t('register.addressForm.addressForm.staticCountries.ZA'), // "South Africa"
            VE: i18n.t('register.registration.addressForm.staticCountries.VE'), // "Venezuela"
        }
    },
    geolocationButton: {
        label: {
            useMyLocation: i18n.t('register.registration.geolocationButton.label.useMyLocation'), // "Use my current location"
            locating: i18n.t('register.header.geolocationButton.aria.locating'), // "Locating..."
        },
        tooltip: {
            default: i18n.t('register.registration.geolocationButton.tooltip.default'), // "Get current location"
        },
        error: {
            notSupported: i18n.t('register.registration.geolocationButton.error.notSupported'), // "Geolocation is not supported by your browser."
            permissionDenied: i18n.t('register.registration.geolocationButton.error.permissionDenied'), // "Permission denied. Please enable location services."
            unavailable: i18n.t('register.registration.geolocationButton.error.unavailable'), // "Location information is unavailable."
            timeout: i18n.t('register.registration.geolocationButton.error.timeout'), // "The request to get user location timed out."
            unknown: i18n.t('register.registration.geolocationButton.error.unknown'), // "An unknown error occurred while trying to get your location."
        },
    },
    mapViewport: {
        markerTitle: i18n.t('register.registration.mapViewport.markerTitle'), // "Selected Location"
        loading: {
            api: i18n.t('register.registration.mapViewport.loading.api'), // "Loading map API..."
            components: i18n.t('register.registration.mapViewport.loading.components'), // "Loading map components..."
        },
        aria: {
            map: i18n.t('register.registration.mapViewport.aria.map'), // "Location selection map"
        }
    },

    passwordStrengthIndicator: {
        weak: i18n.t('register.registration.passwordStrengthIndicator.weak'), // "Weak"
        fair: i18n.t('register.registration.passwordStrengthIndicator.fair'), // "Fair"
        strong: i18n.t('register.registration.passwordStrengthIndicator.strong') // "Strong"
    },

    stageTracker: {
        optionalLabel: i18n.t('register.registration.stageTracker.optionalLabel') // "(Optional)"
    },

    checkboxGroup: {
        selectAll: i18n.t('register.registration.checkboxGroup.selectAll') // "Select All"
    },

    registrationPage: {
        stepTitles: {
            businessInfo: i18n.t('register.registration.registrationPage.stepTitles.businessInfo'), // "Business Information"
            businessLocation: i18n.t('register.registration.registrationPage.stepTitles.businessLocation'), // "Business Location"
            businessLogo: i18n.t('register.registration.registrationPage.stepTitles.businessLogo'), // "Business Logo"
            yourProfile: i18n.t('register.registration.registrationPage.stepTitles.yourProfile'), // "Your Profile"
            setupPreferences: i18n.t('register.registration.registrationPage.stepTitles.setupPreferences'), // "Setup Preferences"
            yourProfileImage: i18n.t('register.registration.registrationPage.stepTitles.yourProfileImage'), // "Your Profile Image"
        },
        stageTrackerLabels: [ // Shortened names for the StageTracker component
            i18n.t('register.registration.registrationPage.stageTrackerLabels.0'),
            i18n.t('register.steps.locationStage.label.mapLocation'),
            i18n.t('register.registration.registrationPage.stageTrackerLabels.2'),
            i18n.t('register.registration.registrationPage.stageTrackerLabels.3'),
            i18n.t('register.registration.registrationPage.stageTrackerLabels.4'),
            i18n.t('products_table.productsTable.tableConfig.headers.image') // "Image"
        ],
        success: {
            registrationComplete: i18n.t('register.registration.registrationPage.success.registrationComplete'), // "Registration successful! Please choose a plan to activate your account."
            accountCreatedWithIssues: {
                base: i18n.t('register.registration.registrationPage.success.accountCreatedWithIssues.base'), // "Account created successfully. "
                logoFail: i18n.t('register.registration.registrationPage.success.accountCreatedWithIssues.logoFail'), // "However, the business logo could not be uploaded: {{error}} "
                profileFail: i18n.t('register.registration.registrationPage.success.accountCreatedWithIssues.profileFail'), // "The profile image could not be uploaded: {{error}} "
                manageInDashboard: i18n.t('register.registration.registrationPage.success.accountCreatedWithIssues.manageInDashboard'), // "You can manage these from your dashboard."
            },
            toastFileUploadWarning: i18n.t('register.registration.registrationPage.success.toastFileUploadWarning'), // "Account created! Some file uploads had issues, you can manage them from your dashboard. Please choose a plan."
            finalSuccessTitle: i18n.t('register.registration.registrationPage.success.finalSuccessTitle'), // "Registration Complete!"
            finalSuccessMessage: i18n.t('register.registration.registrationPage.success.finalSuccessMessage'), // "Your account and business profile have been successfully created. You are now logged in."
        },
        error: {
            noTokensReturned: i18n.t('register.registration.registrationPage.error.noTokensReturned'), // "Registration succeeded but no tokens were returned."
            registrationFailed: i18n.t('register.registration.registrationPage.error.registrationFailed'), // "Registration failed. Please try again."
            serverError: i18n.t('register.registration.registrationPage.error.serverError'), // "A server error occurred. Please try again later or contact support."
            genericError: i18n.t('register.registration.registrationPage.error.genericError'), // "An error occurred (Status: {{status}}). Please check your input."
            noResponse: i18n.t('register.registration.registrationPage.error.noResponse'), // "No response from the server. Please check your network connection."
            unknownError: i18n.t('register.registration.registrationPage.error.unknownError'), // "An unknown error occurred during registration."
            formLoadError: i18n.t('register.registration.registrationPage.error.formLoadError'), // "An error occurred while loading the registration form. Please try again later."
        }
    }
}

export const scriptLines_Header = {
    // Console Log Messages (from previous task)
    log: {
        failedToParseSessionStorage: i18n.t('register.useFormState.log.failedToParseSessionStorage'), // "useFormState: Failed to parse state from session storage:"
        failedToSaveSessionStorage: i18n.t('register.useFormState.log.failedToSaveSessionStorage'), // "useFormState: Failed to save state to session storage:"
    },

    // Validation Messages (from previous task)
    validation: {
        // ... existing validation messages from useFormState ...
        businessNameRequired: i18n.t('register.useFormState.validation.businessNameRequired'), // "Business name is required."
        emailInvalid: i18n.t('register.useFormState.validation.emailInvalid'), // "Invalid email format."
        businessEmailRequired: i18n.t('register.useFormState.validation.businessEmailRequired'), // "Business email is required."
        businessUsernameInvalidFormat: i18n.t('register.useFormState.validation.businessUsernameInvalidFormat'), // "Username can only contain letters, numbers, and underscores."
        businessUsernameRequired: i18n.t('register.useFormState.validation.businessUsernameRequired'), // "Username is required."
        businessPhoneRequired: i18n.t('register.useFormState.validation.businessPhoneRequired'), // "Business phone number is required."
        businessTagsMin: i18n.t('register.useFormState.validation.businessTagsMin'), // "Please select at least one business tag."
        businessWebsiteInvalidUrl: i18n.t('register.useFormState.validation.businessWebsiteInvalidUrl'), // "Please enter a valid URL (e.g., https://example.com).nullable()"
        locationRequiredOnMap: i18n.t('register.useFormState.validation.locationRequiredOnMap'), // "Location is required. Please select on map."
        addressStreetRequired: i18n.t('register.useFormState.validation.addressStreetRequired'), // "Street address is required."
        addressCityRequired: i18n.t('register.useFormState.validation.addressCityRequired'), // "City is required."
        addressPostalCodeRequired: i18n.t('register.useFormState.validation.addressPostalCodeRequired'), // "Postal code is required."
        addressCountryRequired: i18n.t('register.useFormState.validation.addressCountryRequired'), // "Country is required."
        addressDetailsRequired: i18n.t('register.useFormState.validation.addressDetailsRequired'), // "Address details are required."
        logoFileSizeTooLarge: i18n.t('register.useFormState.validation.logoFileSizeTooLarge'), // "Logo file is too large (max 5MB)."
        logoFileTypeUnsupported: i18n.t('register.useFormState.validation.logoFileTypeUnsupported'), // "Unsupported logo format (PNG, JPG, GIF, WEBP)."
        profileNameRequired: i18n.t('register.useFormState.validation.profileNameRequired'), // "Your full name is required."
        profileEmailRequired: i18n.t('register.useFormState.validation.profileEmailRequired'), // "Your contact email is required."
        profilePhoneRequired: i18n.t('register.useFormState.validation.profilePhoneRequired'), // "Your contact phone number is required."
        passwordMinLength: i18n.t('register.useFormState.validation.passwordMinLength'), // "Password must be at least 8 characters."
        passwordRequiresUppercase: i18n.t('register.useFormState.validation.passwordRequiresUppercase'), // "Password must contain an uppercase letter."
        passwordRequiresLowercase: i18n.t('register.useFormState.validation.passwordRequiresLowercase'), // "Password must contain a lowercase letter."
        passwordRequiresNumber: i18n.t('register.useFormState.validation.passwordRequiresNumber'), // "Password must contain a number."
        passwordRequiresSpecialChar: i18n.t('register.useFormState.validation.passwordRequiresSpecialChar'), // "Password must contain a special character."
        passwordRequired: i18n.t('register.useFormState.validation.passwordRequired'), // "Password is required."
        confirmPasswordMatch: i18n.t('register.useFormState.validation.confirmPasswordMatch'), // "Passwords must match."
        confirmPasswordRequired: i18n.t('register.useFormState.validation.confirmPasswordRequired'), // "Please confirm your password."
        timezoneRequired: i18n.t('register.useFormState.validation.timezoneRequired'), // "Timezone selection is required."
        currencyRequired: i18n.t('register.useFormState.validation.currencyRequired'), // "Currency selection is required."
        languageRequired: i18n.t('register.useFormState.validation.languageRequired'), // "Language selection is required."
        acceptTermsRequired: i18n.t('register.useFormState.validation.acceptTermsRequired'), // "You must accept the Terms of Service and Privacy Policy."
        profileImageFileSizeTooLarge: i18n.t('register.useFormState.validation.profileImageFileSizeTooLarge'), // "Profile image is too large (max 5MB)."
        profileImageFileTypeUnsupported: i18n.t('register.useFormState.validation.profileImageFileTypeUnsupported'), // "Unsupported image format."
    },

    // General Error Messages for Steps (from previous task)
    error: {
        form: {
            correctErrorsInStep: i18n.t('register.useFormState.error.form.correctErrorsInStep'), // "Please correct the errors in step {stepNumber}."
            correctErrorsInStepTitleCase: i18n.t('register.useFormState.error.form.correctErrorsInStepTitleCase'), // "Please correct errors in Step {stepNumber}."
        }
    },

    // Password Strength Indicator Values (from previous task)
    passwordStrength: {
        weak: i18n.t('register.useFormState.passwordStrength.weak'), // "weak"
        fair: i18n.t('register.useFormState.passwordStrength.fair'), // "fair"
        strong: i18n.t('register.useFormState.passwordStrength.strong'), // "strong"
    },

    // AddressForm Component Strings (from previous task)
    addressForm: {
        label: {
            streetAddress: i18n.t('register.addressForm.addressForm.label.streetAddress'), // "Street Address"
            city: i18n.t('register.addressForm.addressForm.label.city'), // "City"
            postalCode: i18n.t('register.addressForm.addressForm.label.postalCode'), // "Postal Code"
            country: i18n.t('register.addressForm.addressForm.label.country'), // "Country"
        },
        error: {
            placesImportFailed: i18n.t('register.addressForm.addressForm.error.placesImportFailed'), // "Places import failed"
            countryAutocompleteError: i18n.t('register.addressForm.addressForm.error.countryAutocompleteError'), // "Country autocomplete error"
        },
        staticCountries: {
            US: i18n.t('register.addressForm.addressForm.staticCountries.US'), // "United States"
            ES: i18n.t('register.addressForm.addressForm.staticCountries.ES'), // "Spain"
            FR: i18n.t('register.addressForm.addressForm.staticCountries.FR'), // "France"
            DE: i18n.t('register.addressForm.addressForm.staticCountries.DE'), // "Germany"
            IT: i18n.t('register.addressForm.addressForm.staticCountries.IT'), // "Italy"
            GB: i18n.t('register.addressForm.addressForm.staticCountries.GB'), // "United Kingdom"
            CA: i18n.t('register.addressForm.addressForm.staticCountries.CA'), // "Canada"
            PT: i18n.t('register.addressForm.addressForm.staticCountries.PT'), // "Portugal"
            AU: i18n.t('register.addressForm.addressForm.staticCountries.AU'), // "Australia"
            BR: i18n.t('register.addressForm.addressForm.staticCountries.BR'), // "Brazil"
            JP: i18n.t('register.addressForm.addressForm.staticCountries.JP'), // "Japan"
            IN: i18n.t('register.addressForm.addressForm.staticCountries.IN'), // "India"
            MX: i18n.t('register.addressForm.addressForm.staticCountries.MX'), // "Mexico"
            CN: i18n.t('register.addressForm.addressForm.staticCountries.CN'), // "China"
            RU: i18n.t('register.addressForm.addressForm.staticCountries.RU'), // "Russia"
            ZA: i18n.t('register.addressForm.addressForm.staticCountries.ZA'), // "South Africa"
        }
    },

    autocompleteInput: {
        label: {
            autoComplete: i18n.t('register.header.autocompleteInput.label.autoComplete'), // "Auto Complete"
        },
        placeholder: {
            quickerSearch: i18n.t('register.header.autocompleteInput.placeholder.quickerSearch'), // "Here it is quicker..."
        },
        status: {
            findingLocations: i18n.t('register.header.autocompleteInput.status.findingLocations'), // "Finding fresh locations..."
            noResults: i18n.t('register.header.autocompleteInput.status.noResults'), // "No fresh bakes found..."
        },
        error: {
            placesLibraryLoadFailed: i18n.t('register.header.autocompleteInput.error.placesLibraryLoadFailed'), // "Places library load failed"
            autocompleteError: i18n.t('register.header.autocompleteInput.error.autocompleteError'), // "Autocomplete error"
            noMatchingAddresses: i18n.t('register.header.autocompleteInput.error.noMatchingAddresses'), // "Could not find matching addresses"
        }
    },

    // NEW: GeolocationButton Component Strings
    geolocationButton: {
        label: {
            useMyLocation: i18n.t('register.header.geolocationButton.label.useMyLocation'), // "Use my location"
        },
        aria: {
            locating: i18n.t('register.header.geolocationButton.aria.locating'), // "Locating..."
        },
        error: {
            notSupported: i18n.t('register.header.geolocationButton.error.notSupported'), // "Geolocation is not supported by your browser"
            permissionDenied: i18n.t('register.header.geolocationButton.error.permissionDenied'), // "Enable location access in your browser"
            unableToDetermine: i18n.t('register.header.geolocationButton.error.unableToDetermine'), // "Unable to determine your location"
        }
    },
};

export const scriptLines_Steps = {

    step0BusinessInfo: {
        errors: {
            formDataMissing: i18n.t('register.steps.step0BusinessInfo.errors.formDataMissing'),
            updateFieldMissing: i18n.t('register.steps.step0BusinessInfo.errors.updateFieldMissing'),
        },
        console: {
            invalidFormDataProp: i18n.t('register.steps.step0BusinessInfo.console.invalidFormDataProp'),
            invalidUpdateFieldProp: i18n.t('register.steps.step0BusinessInfo.console.invalidUpdateFieldProp'),
            invalidErrorsProp: i18n.t('register.steps.step0BusinessInfo.console.invalidErrorsProp'),
        },
        label: {
            businessName: i18n.t('register.steps.step0BusinessInfo.label.businessName'),
            businessUsername: i18n.t('register.steps.step0BusinessInfo.label.businessUsername'),
            businessEmail: i18n.t('register.steps.step0BusinessInfo.label.businessEmail'),
            businessPhone: i18n.t('register.steps.step0BusinessInfo.label.businessPhone'),
            businessWebsiteOptional: i18n.t('register.steps.step0BusinessInfo.label.businessWebsiteOptional'),
            businessTags: i18n.t('register.steps.step0BusinessInfo.label.businessTags'),
            referralCodeOptional: i18n.t('register.steps.step0BusinessInfo.label.referralCodeOptional'),
        },
        placeholder: {
            businessName: i18n.t('register.steps.step0BusinessInfo.placeholder.businessName'),
            businessUsername: i18n.t('register.steps.step0BusinessInfo.placeholder.businessUsername'),
            businessEmail: i18n.t('register.steps.step0BusinessInfo.placeholder.businessEmail'),
            businessPhone: i18n.t('register.steps.step0BusinessInfo.placeholder.businessPhone'),
            businessWebsite: i18n.t('register.steps.step0BusinessInfo.placeholder.businessWebsite'),
            businessTags: i18n.t('register.steps.step0BusinessInfo.placeholder.businessTags'),
            referralCode: i18n.t('register.steps.step0BusinessInfo.placeholder.referralCode'),
        },
        helptext: {
            businessTags: i18n.t('register.steps.step0BusinessInfo.helptext.businessTags'),
        },
        /**
         * @constant {string[]} defaultBusinessTags
         * A predefined list of suggested tags to help users categorize their business.
         * These are provided as an array for direct use. For more granular translation or
         * if tags need to be contextually different, each tag could be its own key.
         */
        // Replace the entire 'defaultBusinessTags' array with this:
        defaultBusinessTags: [
            // General Types
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.0'), // "Restaurant"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.1'), // "Cafe"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.2'), // "Retail"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.3'), // "Service"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.4'), // "Bakery"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.5'), // "Bar"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.6'), // "Grocery"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.7'), // "Catering"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.8'), // "Vegan"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.9'), // "Gluten-Free"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.10'), // "Organic"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.11'), // "Local Sourcing"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.12'), // "Coffee Shop"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.13'), // "Juice Bar"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.14'), // "Food Truck"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.15'), // "Pizzeria"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.16'), // "Family-Owned"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.17'), // "Online Only"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.18'), // "Appointment Only"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.19'), // "Sustainable"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.20'), // "Luxury"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.21'), // "Budget-Friendly"
            i18n.t('register.steps.step0BusinessInfo.defaultBusinessTags.22') // "Pet-Friendly"
        ]
    },

    locationStage: {
        label: {
            mapLocation: i18n.t('register.steps.locationStage.label.mapLocation'), // Label for the map section
        },
        // No other direct text strings were found in LocationStage.jsx.
        // AutocompleteInput, GeolocationButton, and AddressForm have their own localized strings.
    },

    step2BusinessLogo: {
        title: i18n.t('register.steps.step2BusinessLogo.title'),
        description: i18n.t('register.steps.step2BusinessLogo.description'),
        errors: {
            formDataUnavailable: i18n.t('register.steps.step2BusinessLogo.errors.formDataUnavailable'),
            updateMechanismImproperlyConfigured: i18n.t('register.steps.step2BusinessLogo.errors.updateMechanismImproperlyConfigured'),
        },
        console: {
            invalidFormDataProp: i18n.t('register.steps.step2BusinessLogo.console.invalidFormDataProp'),
            invalidUpdateFieldProp: i18n.t('register.steps.step2BusinessLogo.console.invalidUpdateFieldProp'),
            invalidErrorsProp: i18n.t('register.steps.step2BusinessLogo.console.invalidErrorsProp'),
        },
        themeColorDefault: i18n.t('payments.components.planSelection.themeColorDefault')
    },

    step3Profile: {
        label: {
            fullName: i18n.t('register.steps.step3Profile.label.fullName'),
            lastName: i18n.t('register.steps.step3Profile.label.lastName'),
            roleAtBusiness: i18n.t('register.steps.step3Profile.label.roleAtBusiness'),
            contactEmail: i18n.t('register.steps.step3Profile.label.contactEmail'),
            contactPhone: i18n.t('register.steps.step3Profile.label.contactPhone'),
            createPassword: i18n.t('register.steps.step3Profile.label.createPassword'),
            confirmPassword: i18n.t('register.steps.step3Profile.label.confirmPassword'),
        },
        placeholder: {
            firstName: i18n.t('register.steps.step3Profile.placeholder.firstName'), // Assuming "Your Full Name" is for first name
            lastName: i18n.t('register.steps.step3Profile.placeholder.lastName'),
            role: i18n.t('register.steps.step3Profile.placeholder.role'),
            contactEmail: i18n.t('register.steps.step3Profile.placeholder.contactEmail'),
            contactPhone: i18n.t('register.steps.step3Profile.placeholder.contactPhone'),
            passwordMinChars: i18n.t('register.steps.step3Profile.placeholder.passwordMinChars'),
            confirmPassword: i18n.t('register.steps.step3Profile.placeholder.confirmPassword'),
        },
        aria: {
            hidePassword: i18n.t('register.steps.step3Profile.aria.hidePassword'),
            showPassword: i18n.t('register.steps.step3Profile.aria.showPassword'),
        },
        errors: {
            formDataMissing: i18n.t('register.steps.step0BusinessInfo.errors.formDataMissing'),
            updateMechanismMissing: i18n.t('register.steps.step0BusinessInfo.errors.updateFieldMissing'),
            passwordStrengthMissing: i18n.t('register.steps.step3Profile.errors.passwordStrengthMissing'),
            passwordVisibilityControlMissing: i18n.t('register.steps.step3Profile.errors.passwordVisibilityControlMissing'),
        },
        console: {
            invalidFormDataProp: i18n.t('register.steps.step3Profile.console.invalidFormDataProp'), // Note: Original log used Step2Profile
            invalidUpdateFieldProp: i18n.t('register.steps.step3Profile.console.invalidUpdateFieldProp'),
            invalidPasswordStrengthProp: i18n.t('register.steps.step3Profile.console.invalidPasswordStrengthProp'),
            invalidPasswordVisibilityProps: i18n.t('register.steps.step3Profile.console.invalidPasswordVisibilityProps'),
        },
        // Note: The password strength indicator ('weak', 'fair', 'strong') itself
        // is likely localized in the PasswordStrength subcomponent or useFormState.
        // If PasswordStrength subcomponent expects localized strings for these,
        // they would be passed as props.
    },

    step4Preferences: {
        label: {
            timezone: i18n.t('register.steps.step4Preferences.label.timezone'),
            preferredNotificationMethod: i18n.t('register.steps.step4Preferences.label.preferredNotificationMethod'),
            primaryCurrency: i18n.t('register.steps.step4Preferences.label.primaryCurrency'),
            preferredDailySummaryTimeOptional: i18n.t('register.steps.step4Preferences.label.preferredDailySummaryTimeOptional'),
            preferredLanguage: i18n.t('register.steps.step4Preferences.label.preferredLanguage'),
            referralSourcesOptional: i18n.t('register.steps.step4Preferences.label.referralSourcesOptional'),
            acceptTerms: i18n.t('register.steps.step4Preferences.label.acceptTerms'), // Placeholders for links
        },
        placeholder: {
            selectTimezone: i18n.t('register.steps.step4Preferences.placeholder.selectTimezone'),
            selectNotificationChannel: i18n.t('register.steps.step4Preferences.placeholder.selectNotificationChannel'),
            selectCurrency: i18n.t('register.steps.step4Preferences.placeholder.selectCurrency'),
            referralSources: i18n.t('register.steps.step4Preferences.placeholder.referralSources'),
        },
        helptext: {
            dailySummaryTime: i18n.t('register.steps.step4Preferences.helptext.dailySummaryTime'),
            referralSources: i18n.t('register.steps.step4Preferences.helptext.referralSources'),
        },
        linkText: {
            termsOfService: i18n.t('register.steps.step4Preferences.linkText.termsOfService'),
            privacyPolicy: i18n.t('register.steps.step4Preferences.linkText.privacyPolicy'),
        },
        // Replace the entire 'options' object within 'step4Preferences' with this:
        options: {
            timezones: [
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.0.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.0.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.1.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.1.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.2.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.2.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.3.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.3.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.4.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.4.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.5.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.5.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.6.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.6.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.7.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.7.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.8.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.8.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.9.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.9.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.10.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.10.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.11.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.11.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.12.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.12.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.13.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.13.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.14.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.14.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.15.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.15.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.16.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.16.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.timezones.17.value'),
                    label: i18n.t('register.steps.step4Preferences.options.timezones.17.label')
                },
            ],
            notificationMethods: [
                {
                    value: i18n.t('register.steps.step4Preferences.options.notificationMethods.0.value'),
                    label: i18n.t('register.steps.step4Preferences.options.notificationMethods.0.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.notificationMethods.1.value'),
                    label: i18n.t('register.steps.step4Preferences.options.notificationMethods.1.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.notificationMethods.2.value'),
                    label: i18n.t('register.steps.step4Preferences.options.notificationMethods.2.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.notificationMethods.3.value'),
                    label: i18n.t('register.steps.step4Preferences.options.notificationMethods.3.label')
                }
            ],
            currencies: [
                {
                    value: i18n.t('register.steps.step4Preferences.options.currencies.0.value'),
                    label: i18n.t('register.steps.step4Preferences.options.currencies.0.label')
                },
                { value: i18n.t('register.steps.step4Preferences.options.currencies.1.value'), label: i18n.t('register.steps.step4Preferences.options.currencies.1.label') },
                {
                    value: i18n.t('register.steps.step4Preferences.options.currencies.2.value'),
                    label: i18n.t('register.steps.step4Preferences.options.currencies.2.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.currencies.3.value'),
                    label: i18n.t('register.steps.step4Preferences.options.currencies.3.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.currencies.4.value'),
                    label: i18n.t('register.steps.step4Preferences.options.currencies.4.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.currencies.5.value'),
                    label: i18n.t('register.steps.step4Preferences.options.currencies.5.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.currencies.6.value'),
                    label: i18n.t('register.steps.step4Preferences.options.currencies.6.label')
                },
            ],
            languages: [
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.0.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.0.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.1.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.1.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.2.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.2.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.3.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.3.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.4.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.4.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.5.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.5.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.6.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.6.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.7.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.7.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.8.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.8.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.9.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.9.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.10.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.10.label')
                },
                {
                    value: i18n.t('register.steps.step4Preferences.options.languages.11.value'),
                    label: i18n.t('register.steps.step4Preferences.options.languages.11.label')
                },
            ],
        },
        errors: {
            formDataMissing: i18n.t('register.steps.step4Preferences.errors.formDataMissing'),
            updateMechanismMissing: i18n.t('register.steps.step0BusinessInfo.errors.updateFieldMissing'),
        },
        console: {
            invalidFormDataProp: i18n.t('register.steps.step4Preferences.console.invalidFormDataProp'),
            invalidUpdateFieldProp: i18n.t('register.steps.step4Preferences.console.invalidUpdateFieldProp'),
            invalidErrorsProp: i18n.t('register.steps.step4Preferences.console.invalidErrorsProp'),
        }
    },

    step5ProfileImage: {
        title: i18n.t('register.steps.step5ProfileImage.title'),
        description: i18n.t('register.steps.step5ProfileImage.description'),
        errors: { // User-facing error messages for prop validation failures
            formDataUnavailable: i18n.t('register.steps.step5ProfileImage.errors.formDataUnavailable'),
            updateMechanismImproperlyConfigured: i18n.t('register.steps.step2BusinessLogo.errors.updateMechanismImproperlyConfigured'),
        },
        console: { // Internal console messages for developers
            invalidFormDataProp: i18n.t('register.steps.step5ProfileImage.console.invalidFormDataProp'),
            invalidUpdateFieldProp: i18n.t('register.steps.step5ProfileImage.console.invalidUpdateFieldProp'),
            invalidErrorsProp: i18n.t('register.steps.step5ProfileImage.console.invalidErrorsProp'),
        },
        themeColorDefault: i18n.t('payments.components.planSelection.themeColorDefault') // Default theme color, can be localized if needed for specific themes per language
    },
};

export const scriptLines_Components = {

    planSelection: {
        title: i18n.t('payments.components.planSelection.title'),
        subtitle: i18n.t('payments.components.planSelection.subtitle'),
        footerNote: i18n.t('payments.components.planSelection.footerNote'),
        buttons: {
            chooseThisPlan: i18n.t('payments.components.planSelection.buttons.chooseThisPlan'),
            processing: i18n.t('payments.components.planSelection.buttons.processing'),
            planSelected: i18n.t('payments.components.planSelection.buttons.planSelected'),
        },
        badges: {
            mostPopular: i18n.t('payments.components.planSelection.badges.mostPopular'),
            recommended: i18n.t('payments.components.planSelection.badges.recommended'), // Fallback if plan.badgeText is not set for a highlighted plan
            specialOffer: i18n.t('payments.components.planSelection.badges.specialOffer'), // Default for discount badge if not specified in plan data
        },
        errors: {
            functionalityUnavailable: i18n.t('payments.components.planSelection.errors.functionalityUnavailable'),
        },
        console: {
            invalidOnPlanSelectProp: i18n.t('payments.components.planSelection.console.invalidOnPlanSelectProp'),
        },
        themeColorDefault: i18n.t('payments.components.planSelection.themeColorDefault'), // Default theme color if not provided
    },

    Dropdown: {
        line1: i18n.t('register.components.Dropdown.line1'),
    },

    formStep: {
        progress: {
            step: i18n.t('register.components.formStep.progress.step'), // e.g., "Step 1"
            of: i18n.t('register.components.formStep.progress.of'),     // e.g., "of 6"
        },
        buttons: {
            back: i18n.t('register.components.formStep.buttons.back'),
            continue: i18n.t('register.components.formStep.buttons.continue'),
            submitting: i18n.t('register.components.formStep.buttons.submitting'),
            completeRegistration: i18n.t('register.components.formStep.buttons.completeRegistration'),
        },
        errors: { // User-facing error messages for prop validation failures
            stepConfigurationInvalid: i18n.t('register.components.formStep.errors.stepConfigurationInvalid'),
            stepContentMissing: i18n.t('register.components.formStep.errors.stepContentMissing'),
            formContextUnavailable: i18n.t('register.components.formStep.errors.formContextUnavailable'),
            navigationHandlersMissing: i18n.t('register.components.formStep.errors.navigationHandlersMissing'),
            unexpectedError: i18n.t('register.components.formStep.errors.unexpectedError'), // Generic fallback error
        },
        console: { // Internal console messages for developers
            invalidStepIndexProp: i18n.t('register.components.formStep.console.invalidStepIndexProp'),
            invalidTitleProp: i18n.t('register.components.formStep.console.invalidTitleProp'),
            missingChildrenProp: i18n.t('register.components.formStep.console.missingChildrenProp'),
            invalidFormStateProp: i18n.t('register.components.formStep.console.invalidFormStateProp'),
            missingNavigationHandlers: i18n.t('register.components.formStep.console.missingNavigationHandlers'),
            invalidOnSubmitProp: i18n.t('register.components.formStep.console.invalidOnSubmitProp'),
            validationOrProceedError: i18n.t('register.components.formStep.console.validationOrProceedError'),
        },
        themeColorDefault: i18n.t('payments.components.planSelection.themeColorDefault'),
        // TOTAL_FORM_STEPS might be better configured globally or passed as a prop if it's dynamic,
        // but if it's truly fixed for this form context, it can be a constant.
        // For i18n, if "Step X of Y" needs different phrasing per language, the whole string might need localization.
    },

    imageUploader: {
        dropzone: {
            ctaActive: i18n.t('register.components.imageUploader.dropzone.ctaActive'),
            ctaDefault: "<span class='font-bold'>{clickToUpload}</span> or drag & drop", // Placeholder for clickable part
            clickToUploadText: i18n.t('register.components.imageUploader.dropzone.clickToUploadText'), // Text for the clickable part of ctaDefault
            fileTypes: i18n.t('register.components.imageUploader.dropzone.fileTypes'), // Placeholder for max size
        },
        cropper: {
            title: i18n.t('register.components.imageUploader.cropper.title'),
            buttons: {
                applyCrop: i18n.t('register.components.imageUploader.cropper.buttons.applyCrop'),
                processing: i18n.t('payments.components.planSelection.buttons.processing'),
                resetCrop: i18n.t('register.components.imageUploader.cropper.buttons.resetCrop'), // When initialSrc is being re-cropped
                changeImage: i18n.t('register.components.imageUploader.cropper.buttons.changeImage'), // When a new file was uploaded
            },
        },
        preview: {
            title: i18n.t('register.components.imageUploader.preview.title'), // Or "Current Logo:" if context known
            uploadNew: i18n.t('register.components.imageUploader.preview.uploadNew'),
        },
        errors: {
            fileTooLarge: "File is too large. Max size: {{maxFileSizeMB}}MB.",
            invalidFileType: i18n.t('register.components.imageUploader.errors.invalidFileType'),
            fileNotAccepted: i18n.t('register.components.imageUploader.errors.fileNotAccepted'),
            errorReadingFile: i18n.t('register.components.imageUploader.errors.errorReadingFile'),
            cropSaveError: i18n.t('register.components.imageUploader.errors.cropSaveError'),
            canvasContextError: i18n.t('register.components.imageUploader.errors.canvasContextError'),
            blobCreationError: i18n.t('register.components.imageUploader.errors.blobCreationError'),
            handlerMissing: i18n.t('register.components.imageUploader.errors.handlerMissing'), // For prop validation
        },
        console: {
            invalidOnImageUploadProp: i18n.t('register.components.imageUploader.console.invalidOnImageUploadProp'),
            initialSrcWarning: i18n.t('register.components.imageUploader.console.initialSrcWarning'),
        },
        themeColorDefault: i18n.t('payments.components.planSelection.themeColorDefault'),
    },

    trustFooter: {
        securityMessage: i18n.t('register.components.trustFooter.securityMessage'),
        links: {
            privacyPolicy: i18n.t('register.steps.step4Preferences.linkText.privacyPolicy'),
            termsOfUse: i18n.t('register.components.trustFooter.links.termsOfUse'), // Or "Terms of Service" depending on naming convention
        },
        copyright: i18n.t('register.components.trustFooter.copyright'), // Placeholders for dynamic values
        // Default values, if needed for props, can also be here.
        // Example: themeColorDefault: "rose"
        // Default URLs are usually app config, not i18n, but could be if regional sites differ.
    },
};