// src/features/venue_management/utils/script_lines.js
export const scriptLines = {
    // --- Global Settings ---
    currencySymbol: "$",
    currencyFormat: "{symbol}{amount}", // e.g., $10.99
    currencyCode: "USD", // Example
    decimalSeparator: ".",
    thousandSeparator: ",",
    decimals: 2,

    // --- Common / General ---
    error: "Error",
    info: "Info",
    warning: "Warning",
    success: "Success",
    loading: "Loading...",
    tryAgain: "Try Again",
    save: "Save",
    cancel: "Cancel",
    confirm: "Confirm",
    close: "Close",
    yes: "Yes",
    no: "No",
    next: "Next",
    back: "Back",
    finish: "Finish",
    submit: "Submit",
    search: "Search",
    actions: "Actions",
    edit: "Edit",
    delete: "Delete",
    view: "View",
    add: "Add",
    requiredField: "This field is required.",
    noDataAvailable: "No data available.",
    page: "Page",
    of: "of",
    items: "Items",
    total: "Total",

    // --- Venue Management Feature ---
    venueManagement: {
        // ... (all your existing venueManagement strings) ...
        liveOrderDashboard: {
            title: "Bakery Orders",
            hideSidebar: "Hide Sidebar",
            showSidebar: "Show Sidebar",
            liveStatusTitle: "Live Table Status (Refreshes {timeAgo})",
            newOrdersLabel: "New Orders: {count}",
            activeViewedLabel: "Active Viewed: {count}",
            designLayoutButton: "Design Table Layout",
            simulateOrderButton: "Simulate New Order",
            kitchenAreaLabel: "Kitchen",
            noTablesDefinedTitle: "No tables defined yet.",
            noTablesDefinedMessage: "Click \"Design Table Layout\" to get started.",
            footerText: "Bakery Table Management System © {year}",
            viewedOrdersTitle: "Viewed Orders ({count})",
            tableLabel: "Table {number}",
            idLabel: "ID: {id}...",
            delayedStatus: "Delayed",
            activeStatus: "Active",
            itemsLabel: "Items:",
            peopleLabel: "People:",
            totalPriceLabel: "Total: {price}", // Price will be formatted
            orderDetailsTitle: "Order Details: Table {number}",
            confirmChargeTitle: "Confirm Charge & Clear Table",
            confirmChargeMessage: "Have you charged the client and are ready to clear Table {number}?",
            confirmChargeConfirmText: "Yes, Charged & Clear",
            confirmChargeCancelText: "No, Not Yet",
            alertNoTablesForSimulateTitle: "No Tables Defined",
            alertNoTablesForSimulateMessage: "Please design the table layout first before simulating orders.",
        },
        useLayoutData: {
            loadingErrorTitle: "Loading Error",
            loadingErrorMessageDefault: "Could not load venue layout from the server.",
            noActiveLayoutMessage: "No active layout found on backend. Using default local structure.",
            saveErrorTitle: "Save Error",
            saveErrorNotLoaded: "Layout data is not yet loaded. Please wait and try again.",
            saveErrorNoData: "No layout data provided to save.",
            saveErrorDefault: "Could not save venue layout.",
            saveErrorDetailsPrefix: "Details: {details}",
            layoutSavedTitle: "Layout Saved",
            layoutSavedMessage: "Venue layout has been successfully saved.",
            resetLocallyTitle: "Layout Reset Locally",
            resetLocallyMessage: "The layout has been reset to default. Save to persist these changes.",
        },
        venueDesignerPage: {
            defaultLayoutName: "Default Venue Layout",
            initializingEditor: "Initializing Editor...",
            loadingPreview: "Loading Preview...",
            unsavedChangesTitle: "Unsaved Changes",
            switchToPreviewConfirmationMessage: "You have unsaved changes. How would you like to proceed to Preview Mode?",
            previewUnsavedButton: "Preview Unsaved",
            previewLastSavedButton: "Preview Last Saved",
            stayInDesignButton: "Stay in Design Mode",
            previewingUnsavedAlertTitle: "Previewing Unsaved Changes",
            previewingUnsavedAlertMessage: "You are viewing your current unsaved changes. These are not yet saved to the server.",
            previewingLastSavedAlertTitle: "Previewing Last Saved Layout",
            previewingLastSavedAlertMessage: "Showing the last saved version. Your unsaved changes remain in the editor.",
            errorGettingEditorStateTitle: "Error",
            errorGettingEditorStateMessage: "Could not get current editor state for preview. Please save first.",
            exitLayoutManagerTitle: "Exit Layout Manager",
            exitLayoutManagerConfirmationMessage: "You have unsaved changes. Are you sure you want to exit and discard them?",
            discardAndExitButton: "Discard & Exit",
            stayOnPageButton: "Stay on Page",
            loadingPageTitle: "Loading Venue Designer...",
            errorPageTitle: "Failed to Load Layout Data",
            errorPageMessage: "Could not initialize layout data. Please try refreshing. If the problem persists, contact support.",
            refreshPageButton: "Refresh Page",
        },
        venueDesignerHeader: {
            designModeLabel: "Design",
            previewModeLabel: "Preview",
            unsavedChangesTooltip: "Unsaved Changes",
            focusModeTooltip: "Focus Mode",
            downloadQrTooltip: "Download All QR Codes",
            qrButtonText: "QRs",
        },
        layoutEditor: {
            canvasAreaLabel: "Layout Design Canvas Area",
            mainRegionLabel: "Layout Design Canvas Area",
            propertiesInspectorRegionLabel: "Item Properties Inspector",
            confirmClearTitle: "Clear Entire Layout",
            confirmClearMessage: "Are you sure you want to clear all items and reset grid settings to default? This action will be recorded in history but directly clearing is a significant step.",
            confirmClearConfirmText: "Yes, Clear All & Reset",
            confirmClearCancelText: "Cancel",
            saveErrorNotConfigured: "Save function (onSaveTrigger) not configured for LayoutEditor.",
            validationErrorTitle: "Layout Validation Error",
            validationErrorInvalidTables: "Ensure all tables have valid, positive numbers.",
            validationErrorDuplicateTableNumbers: "Table numbers must be unique.",
            toolSelectedForPlacement: "Tool selected for placement: {toolName}",
            toolDeselectedForPlacement: "Tool deselected for placement.",
            cellClickedNewItem: "Cell clicked for NEW item placement. Tool: {toolName}, Target: R{row}C{col}",
            cellClickedExistingItem: "Cell clicked for EXISTING item move. Candidate: {itemId}, Target: R{row}C{col}",
        },
        editorToolbar: {
            toolbarLabel: "Layout Editor Toolbar",
            elementsCategory: "Elements", 
            categoryLabelSuffix: "", 
            rowsLabel: "R:",
            colsLabel: "C:",
            gridRowsAriaLabel: "Grid Rows",
            gridColsAriaLabel: "Grid Columns",
            gridSubdivisionAriaLabel: "Grid Subdivision",
            subdivisionOptionSuffix: "x{value}", 
            zoomOutTooltip: "Zoom Out (-)",
            resetZoomTooltip: "Reset Zoom ({percentage}%)",
            zoomInTooltip: "Zoom In (+)",
            undoTooltip: "Undo (Ctrl+Z)",
            redoTooltip: "Redo (Ctrl+Y)",
            saveLayoutTooltip: "Save Layout (Ctrl+S)",
            saveButtonText: "Save", 
            clearLayoutTooltip: "Clear Entire Layout",
            focusModeEnterTooltip: "Enter Focus Mode",
            focusModeExitTooltip: "Exit Focus Mode (Esc)",
            eraserActivateTooltip: "Activate Eraser (E)",
            eraserDeactivateTooltip: "Deactivate Eraser (E)",
        },
        editorCanvas: {
            mainCanvasAreaLabel: "Venue Layout Design Canvas",
            gridRegionLabel: "Layout Grid Area", 
            resizePreviewAriaHidden: "true", 
        },
        canvasCell: {
            gridCellRoleDescription: "Layout grid cell",
        },
        placedItem: {
            defaultRendererMissingText: "Renderer Missing",
            defaultRendererTypeLabel: "Type: {itemType}",
            defaultRendererIdLabel: "ID: {itemId}",
            itemBaseTitle: "{itemName}", 
            itemFixedSuffix: "(Fixed)",
            itemProvisionalSuffix: "(Provisional - Click in Editor to set number)", 
            itemMoveCandidateSuffix: "Click a cell to move {itemName}", 
            itemEraserActionText: "Tap to erase {itemName}",
            itemSelectActionText: "Tap to select {itemName}",
            itemDefaultAriaRole: "button", 
        },
        resizeHandle: {
            tooltipPrefix: "Resize {direction}", 
            directionN: "North",
            directionS: "South",
            directionE: "East",
            directionW: "West",
        },
        rotationHandle: {
            tooltip: "Rotate Item (90°)",
            ariaLabel: "Rotate Item by 90 degrees",
        },
        propertiesInspector: {
            defaultTitle: "Properties",
            itemPropertiesTitleSuffix: "Properties", 
            closeButtonTooltip: "Close Properties Panel",
            closeButtonAriaLabel: "Close Properties Panel",
            minimizedTabTooltip: "Show Properties", 
            mobilePeekTitleSuffix: "Properties", 
            noItemSelectedMessage: "Select an item on the canvas to view its properties.",
            defaultInspectorContent_rendererMissingText: "Renderer Missing", 
            defaultInspectorContent_typeLabel: "Type: {itemType}",
            defaultInspectorContent_idLabel: "ID: {itemId}",
            defaultInspectorContent_noEditorConfigured: "No specific editor configured for this item type, or the configured key is not matched.",
        },
        tableEditor: {
            tableNumberLabel: "Table Number",
            tableNumberValueNotSet: "Not Set",
            tableNumberValueProvisional: "Nº? (Set on table)",
            tableNumberHelpText: "Edit number on the table itself. Click to select, then click number to edit.",
            seatsLabel: "Number of Seats",
            seatsPlaceholder: "e.g., 4 or empty for default",
            seatsTooltip: "Enter a number or leave empty for default seats.", 
            seatsHelpText: "Enter a number or leave empty for default seats.", 
            infoSectionTitle: "Table Information", 
            itemIdLabel: "Item ID:",
            defaultShapeLabel: "Default shape:",
            rotationLabel: "Rotation:",
            provisionalLabel: "Provisional:",
            fixedLabel: "Fixed:",
            yesValue: "Yes",
            noValue: "No",
        },
        wallEditor: {
            thicknessLabel: "Visual Thickness (minor cells)",
            thicknessTooltip: "Visual thickness of the wall within its own cell.",
            thicknessHelpText: "Thickness within its own grid cell. Does not affect collision. Max: {maxThickness}.",
            infoSectionTitle: "Wall Information", 
            itemIdLabel: "Item ID:",
            lengthLabel: "Length (major units):",
            baseWidthLabel: "Base Width (minor):",
            baseHeightLabel: "Base Height (minor):",
            rotationLabel: "Rotation:",
            fixedLabel: "Fixed:",
            yesValue: "Yes",
            noValue: "No",
        },
        doorEditor: {
            swingDirectionLabel: "Swing Direction",
            leftSwingOption: "Left Swing",
            rightSwingOption: "Right Swing",
            selectSwingPlaceholder: "Select Swing Direction", 
            infoSectionTitle: "Door Information", 
            itemIdLabel: "Item ID:",
            typeLabel: "Type:",
            standardDoorType: "Standard Door", 
            rotationLabel: "Rotation:",
            fixedLabel: "Fixed:",
            yesValue: "Yes",
            noValue: "No",
        },
        decorEditor: {
            labelOptionalLabel: "Label (Optional)",
            labelPlaceholder: "e.g., Potted Fern, Area Rug",
            labelTooltip: "Enter an optional label for this decor item.",
            widthLabel: "Width (minor cells)",
            widthTooltip: "Width of the item's base before rotation.",
            heightLabel: "Height (minor cells)",
            heightTooltip: "Height of the item's base before rotation.",
            dimensionsHelpText: "Dimensions apply to the item's base before rotation.",
            infoSectionTitle: "Decor Information", 
            itemIdLabel: "Item ID:",
            decorTypeLabel: "Decor Type:",
            decorTypeGeneric: "Generic", 
            shapeConfigLabel: "Shape Config:",
            rotationLabel: "Rotation:",
            fixedLabel: "Fixed:",
            yesValue: "Yes",
            noValue: "No",
        },
        counterEditor: {
            labelOptionalLabel: "Label (Optional)",
            labelPlaceholder: "e.g., Main Bar, Register",
            labelTooltip: "Enter an optional label for this counter.",
            lengthLabel: "Length (major grid units)",
            lengthPlaceholder: "e.g., 2",
            lengthTooltip: "Length of the counter along its main axis, in major grid cells.",
            lengthHelpText: "Defines length along its main axis. Thickness is 1 major unit.",
            invalidItemError: "Error: Invalid item for Counter Editor.", 
            infoSectionTitle: "Counter Information", 
            itemIdLabel: "Item ID:",
            decorTypeLabel: "Decor Type (if any):",
            shapeConfigLabel: "Shape Config:",
            rotationLabel: "Rotation:",
            actualBaseWidthLabel: "Actual Base Width (minor):",
            actualBaseHeightLabel: "Actual Base Height (minor):",
            fixedLabel: "Fixed:",
            yesValue: "Yes",
            noValue: "No",
        },
        tableRenderer: {
            fixedTooltipSuffix: "(Fixed)",
            provisionalTooltipText: "Provisional Table (Click in Editor to set number)",
            tableTooltipPrefix: "Table {number}",
            provisionalDisplayValue: "Nº?", 
            tableNumberPrefix: "T", 
            tableNumberNotSet: "", 
        },
        counterRenderer: {
            defaultLabel: "Counter", 
        },
        useLayoutDesignerStateManagement: {
            configErrorMissingConfigTitle: "Configuration Error",
            configErrorMissingConfigMessage: "Missing configuration for item type: {itemType}. Please contact support.",
            configErrorMissingFactoryTitle: "Configuration Error",
            configErrorMissingFactoryMessage: "Missing properties factory for item type: {itemType}. Please contact support.",
            factoryErrorTitle: "Factory Error",
            factoryErrorMessage: "Error creating properties for new item ({itemType}).",
            dimensionErrorTitle: "Dimension Error",
            dimensionErrorMinMessage: "Invalid base dimensions for new item. Minimum dimension is {minCells} cell(s).",
            placementErrorTitle: "Placement Error",
            placementErrorOccupiedOrOutOfBounds: "Cannot place item: Space occupied or out of bounds.",
            resizeErrorConflictOrOutOfBounds: "Resized/moved item conflicts or is out of bounds.",
            rotationErrorTitle: "Rotation Error",
            rotationErrorConflictOrOutOfBounds: "Cannot rotate: new orientation conflicts or is out of bounds.",
            sizingErrorTitle: "Sizing Error", 
            counterSizingErrorConflict: "Counter cannot be resized: new size conflicts or is out of bounds.",
            invalidInputTitle: "Invalid Input",
            invalidRotationAngle: "Invalid rotation angle.",
            invalidRotationType: "Invalid rotation type.",
            counterLengthPositiveError: "Counter length must be a positive number.",
            invalidTableNumberTitle: "Invalid Table Number",
            invalidTableNumberMessage: "Table number must be a positive integer or empty.",
            duplicateTableNumberTitle: "Duplicate Table Number",
            duplicateTableNumberMessage: "Table number {number} is already in use.",
            invalidSeatCountTitle: "Invalid Seat Count",
            invalidSeatCountMessage: "Seat count must be a non-negative integer or empty.",
            gridDimensionErrorTitle: "Invalid Dimension",
            gridDimensionErrorRange: "Grid dimensions out of range. Min/Max Rows: {minRows}-{maxRows}, Cols: {minCols}-{maxCols}.",
            gridResizeErrorOutOfBoundsTitle: "Resize Error",
            gridResizeErrorOutOfBoundsMessage: "Cannot reduce dimensions. Some items would be out of bounds.",
            invalidSubdivisionTitle: "Invalid Subdivision",
            invalidSubdivisionMessage: "Grid subdivision level is invalid.",
            subdivisionChangedTitle: "Subdivision Changed",
            subdivisionChangedMessage: "Grid subdivision has been updated. Existing items' dimensions are in minor cells and will not automatically scale. Manual adjustment may be needed if their intended size was relative to major grid units.",
            designerClearedTitle: "Designer Cleared",
            designerClearedMessage: "All items have been removed from the layout.",
            designerResetTitle: "Designer Reset",
            designerResetMessage: "Layout and grid settings have been reset to default.",
        },
        useQrCodeManager: {
            qrFetchErrorTitleGeneric: "Network Error",
            qrFetchErrorTitleHttp: "QR Error (HTTP {status})",
            qrFetchErrorMessage: "Could not fetch QR for Table {tableIdentifier}: {errorMessage}",
            qrFetchServiceUnavailableTitle: "QR Service Info",
            qrFetchServiceUnavailableMessage: "QR code generation for Table {tableIdentifier} is currently unavailable (endpoint not ready).",
            downloadErrorTitle: "Download Error",
            downloadErrorInvalidTable: "Invalid table data for QR download.",
            qrNotAvailableForDownloadTitle: "QR Not Available",
            qrNotAvailableServiceMessage: "QR code for Table {tableIdentifier} cannot be downloaded as the generation service is unavailable.",
            qrNotAvailablePreviouslyFailedMessage: "QR code for Table {tableIdentifier} could not be generated previously. Try refreshing or check logs.",
            qrNotAvailableGenericDownloadError: "Could not download QR for Table {tableIdentifier}. Ensure it can be generated.",
            noQrCodesToDownloadTitle: "No QR Codes",
            noQrCodesToDownloadMessage: "There are no valid, numbered tables to download QR codes for.",
            downloadStartingTitle: "Download Starting",
            downloadStartingMessage: "Preparing to download available QR code(s) for {count} table(s). This may take a moment.",
            downloadStartingSomeUnavailable: " Some QRs are unavailable or errored.", 
            downloadStartingSomeServiceDisabled: " Some QRs are unavailable (service disabled).", 
            downloadStartingSomeFailed: " Some QRs previously failed to generate.", 
            downloadCompleteTitle: "Download Complete",
            downloadCompleteMessage: "Successfully downloaded {count} QR codes.",
            downloadPartialTitle: "Download Partial",
            downloadPartialMessageSuccess: "Successfully downloaded {downloadedCount} QR codes.", 
            downloadPartialMessageFailed: " {failedCount} failed.", 
            downloadPartialMessageSkipped: " {skippedCount} skipped (service unavailable).", 
            downloadFailedTitle: "Download Failed",
            downloadFailedAllMessage: "All {count} QR codes could not be downloaded at this time.",
            downloadUnavailableAllServiceMessage: "All QR codes are currently unavailable because the generation service is offline.",
            downloadIssueMixedTitle: "Download Issue",
            downloadIssueMixedMessage: "No QR codes downloaded. {failedCount} failed, {skippedCount} skipped (service unavailable).",
        },
        itemConfigs: {
            placedTableDisplayName: "Table",
            placedWallDisplayName: "Wall",
            placedDoorDisplayName: "Door",
            placedDecorDisplayName: "Decor",
            placedCounterDisplayName: "Counter",
            squareTableToolName: "Square Table",
            rectTableToolName: "Rect. Table", 
            roundTableToolName: "Round Table",
            counterToolName: "Counter",
            wallToolName: "Wall",
            doorToolName: "Door",
            plantToolName: "Plant",
            rugToolName: "Rug",
        },
        draggableTool: {
            tooltipActivePlacement: "Tool '{toolName}' active. Click a cell to place.",
            tooltipDefaultZenMode: "{toolName}", 
            tooltipDefaultFullMode: "Click to select, or Drag to add {toolName}",
            ariaLabelActivePlacement: "{toolName} tool. Currently active for placement.",
            ariaLabelDefault: "{toolName} tool. Click to select or drag to add.",
        },
        venueLayoutPreview: {
            previewUnavailableTitle: "Layout Preview Unavailable",
            previewUnavailableMessage: "It seems there's no layout data to display, or grid dimensions are invalid. <br />Please design your layout in 'Design Mode' first.",
            qrSidebarTitle: "Table QR Codes",
            qrTableNumberLabel: "Table {number}",
            qrSeatsLabel: "{seats} Seats", 
            qrSeatsNotAvailable: "N/A Seats",
            qrShapeLabel: "{shape}", 
            qrDownloadButtonTooltip: "Download QR Code",
            qrStatusLoading: "Loading QR...", 
            qrStatusError: "Error loading QR",
            qrStatusSkipped: "QR Generation Offline",
            qrStatusPending: "QR Pending",
            qrErrorMessage: "Could not load.", 
            qrSkippedMessage: "Unavailable.", 
            noTablesForQrTitle: "No Tables for QR Codes",
            noTablesForQrMessage: "Switch to 'Design Mode' to add tables to your layout and assign them numbers.",
            downloadAllQrsButtonText: "Download All QRs",
            gridItemTableTooltip: "Table {number} - Click to see QR in sidebar",
            gridItemDefaultTooltip: "{itemName}",
        },
        layoutItemRendererUtils: {
            defaultPreviewRendererTitle: "{itemName} (ID: {itemId})",
            defaultPreviewRendererItemNameFallback: "Unknown Item",
        },
    }, // End of venueManagement

    // --- Kitchen Display System Feature ---
    kitchenDisplaySystem: {
        pageTitle: "Kitchen Order Display",
        loadingOrders: "Loading Orders...",
        noOrdersTitle: "No Active Orders",
        noOrdersMessage: "Currently, there are no orders to display. New orders will appear here automatically.",
        orderCard: {
            tableLabel: "Table {tableNumber}",
            orderIdLabel: "Order ID: {orderId}",
            orderedAtLabel: "Ordered: {time}",
            itemsLabel: "Items",
            markAsPreparing: "Start Preparing",
            markAsReady: "Mark as Ready",
            markAsServed: "Mark as Served",
            markAsPaid: "Mark as Paid",
            markAsCompleted: "Complete Order",
            preparingStatus: "Preparing",
            readyStatus: "Ready",
            newStatus: "New",
            servedStatus: "Served",
            paidStatus: "Paid",
            completedStatus: "Completed",
            itemQuantity: "x{quantity}",
            itemNotesLabel: "Notes:"
        },
        header: {
            filterAll: "All",
            filterNew: "New",
            filterPreparing: "Preparing",
            filterReady: "Ready",
            filterServed: "Served",
            filterPaid: "Paid",
            groupByTableToggle: "Group by Table",
        },
        errorFetchingOrders: "Error fetching kitchen orders. Please try again.",
        errorUpdatingStatus: "Error updating order status. Please try again.",
        statusUpdateSuccess: "Order status updated successfully.",
    }, // End of kitchenDisplaySystem

}; // End of scriptLines object

// Helper for interpolation
export const interpolate = (str, params) => {
    if (!str || typeof str !== 'string') return '';
    let newStr = str;
    if (params) {
        for (const key in params) {
            newStr = newStr.replace(new RegExp(`\\{${key}\\}`, 'g'), params[key]);
        }
    }
    return newStr;
};

// Helper for currency formatting
export const formatCurrency = (amount, config) => {
    const {
        currencySymbol = scriptLines.currencySymbol,
        currencyFormat = scriptLines.currencyFormat,
        decimalSeparator = scriptLines.decimalSeparator,
        thousandSeparator = scriptLines.thousandSeparator,
        decimals = scriptLines.decimals
    } = config || scriptLines;

    const num = parseFloat(amount);
    if (isNaN(num)) return String(amount);

    const fixedAmount = num.toFixed(decimals);
    let [integerPart, decimalPart] = fixedAmount.split('.');
    integerPart = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, thousandSeparator);

    const formattedAmount = decimalPart ? `${integerPart}${decimalSeparator}${decimalPart}` : integerPart;

    return interpolate(currencyFormat, { symbol: currencySymbol, amount: formattedAmount });
};

export default scriptLines;